package de.hahn.blog.test1213.model.adfbc.views;

import oracle.jbo.Variable;
import oracle.jbo.VariableValueManager;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 09 12:48:24 CEST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DepartmentsViewImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public DepartmentsViewImpl() {
    }

    /**
     * Returns the variable value for bindMgrId.
     * @return variable value for bindMgrId
     */
    public Integer getbindMgrId() {
        return (Integer) ensureVariableManager().getVariableValue("bindMgrId");
    }

    /**
     * Sets <code>value</code> for variable bindMgrId.
     * @param value value to bind as bindMgrId
     */
    public void setbindMgrId(Integer value) {
        ensureVariableManager().setVariableValue("bindMgrId", value);
    }

    public void dumpQueryAndParameters() {
        // get the query in it's current state
        String lQuery = getQuery();
        //get Valriables
        VariableValueManager lEnsureVariableManager = ensureVariableManager();
        Variable[] lVariables = lEnsureVariableManager.getVariables();
        int lCount = lEnsureVariableManager.getVariableCount();
        // Dump query
        System.out.println("---query--- " + lQuery);
        // if variables found dump them
        if (lCount > 0) {
            System.out.println("---Variables:");
            for (int ii = 0; ii < lCount; ii++) {
                Object lObject = lEnsureVariableManager.getVariableValue(lVariables[ii]);
                System.out.println("  --- Name: " + lVariables[ii].getName() + " Value: " + (lObject != null ? lObject.toString() : "null"));
            }
        }
    }

    @Override
    public void executeQuery() {
        dumpQueryAndParameters();
        super.executeQuery();
    }
}

